- the substitution method for solving recurrences involves two steps
	1. Guess the form of the substitution
	2. Use mathematical induction to find the constants and show the solution works.
- we substitute the guessed solution for the function when applying the inductive hypothesis to smaller values; hence the name "substitution method"
- you must be able to guess the form of the answer before trying the substitution method

As an example, take the recurrence:
	
	T(n) = 2T(n/2) + n

and prove that is is upper bounded by O(nlgn). When I prove that something is upper bounded, I always write out the formal definition of big-O notation:

	O(g(n)) = {f(n) : there exists positive constants c and n0 such that 0 ≤ f(n) ≤ cg(n) for all n ≥ n0}.

To prove that our recurrence is upper bounded by O(nlgn), and in addition to proving that 0 ≤ f(n) ≤ cg(n), we must prove that f(n) ≤ cg(n) for all n < n0 as well. This will be step #1.

	step 1: prove that f(n) ≤ cg(n) for all n ≤ n0 when n=n/2	-----> the n/2 value was taken from the recurrence
		f(n) = T(n)
		g(n) = nlgn
	
		f(n) ≤ cg(n)			-----> start with base definition
	     => T(n) ≤ c*nlgn			-----> expand base notation with the above definitions of f(n) and g(n)
	     => T(n/2) ≤ c*(n/2)*lg(n/2)	-----> substituted n/2 in for n
	     => T(n) ≤ 2*c(n/2)*lg(n/2) + n	-----> substituted T(n/2) into the recurrence
	     => T(n) ≤ cn*lg(n/2) + n		-----> multiplied c(n/2) by 2 to get cn
	     => T(n) ≤ cn*(lg(n)-lg2) + n	-----> used the rule 'lg(a/b) = lg(a)-lg(b) to expand lg(n/2) to lg(n)-lg(2)
	     => T(n) ≤ cn*(lg(n)-1) + n		-----> evalued lg(2) which equals 1
	     => T(n) ≤ cnlg(n) - cn + n		-----> multiplied the expression 'lg(n)-1' by cn
	     => T(n) ≤ cnlg(n) when c ≥ 1	-----> drop low order terms and constants?
	
	To recap, we've just proved that our assertion that the recurrence T(n) = 2T(n/2) + n is asymptotically bounded on top by O(nlgn) for all m < n0.

	step 2: determine the base boundary conditions of the recurrence and the base cases of the inductive proof

		Mathematical induction requires that we show our solution holds for the boundary conditions. Typically we do so by showing that the boundary conditions are suitable as the base cases for the inductive proof. The first question to ask then is: "what are the boundary conditions"?

		Since we're dealing with only n ≥ 1, let's first try n = 1 as a boundary condition of the recurrence.

		if n = 1, then the recurrence would look like: T(1) = 2T(1/2) + 1 => 2T(0) + 1 => 1 so T(1) = 1
		Substituting T(1) = 1 into the 'T(n) ≤ O(nlgn)' inequality yields 1 ≤ 1*lg(0) => 1 ≤ 0 which is clearly false. This result simply means that we can't use the value n = 1 as a base case for the recurrence. However we know that T(1) = 1 because, given a problem size of 1, our algorithm should take constant time. Therefore we will use T(1) = 1 to determine the base case for the inductive proof while ignoring it in the proof itself. This works as follows:

		We can determine T(2) from T(1) like so: T(2) = 2T(2/2) + 2 => 2T(1) + 2 => 2(1) + 2 => 4
		We can determine T(3) from T(1) like so: T(2) = 2T(3/2) + 3 => 2T(1) + 3 => 2(1) + 3 => 5
		We don't need to determine T(4) since T(4) is not dependenet at all on T(1). Not that we have T(2) and T(3) as base cases for the inductive proof, we don't need T(1) in the inductive proof at all. The following paragraph explains why:

		Since we've proving that 0 ≤ f(n) ≤ cg(n) for some c and all n ≥ n0 using inductive reasoning, and since we get to choose the value of n0, I am choosing to pick a value of n0 > 1 (since T(1) fails in the recurrence). If we're going to get rid of T(1) in the inductive proof, we need to calcuate the base cases of the inductive proof first by using T(1). That is what we just did in the above paragraph when we derived the base case values T(2) and T(3) to equal 4 and 5 respectively. 

		We now need to prove that:
			T(2) ≤ c*2lg2 for some c ≥ 1 AND
			T(3) ≤ c*3lg3 for some c ≥ 1

			It turns out that c = 2 suffices for the base cases of the inductive proof.

	step 3: Now we must prove the inductive step. We must prove that f(n) ≤ cg(n) for some c and all n ≥ n0. However, we must prove this for n = k + 1
		f(k+1) = T(k+1)
		g(k+1) = (k+1)*lg(k+1)

		Prove that 0 ≤ T(k+1) ≤ c(k+1)*lg(k+1)
			= 2*c(k+1/2)*lg(k+1/2)
		        = c(k+1)*lg(k+1/2)
			= c(k+1)*lg(k+1) - lg(2)
			≤ c(k+1)*lg(k+1) - 1
		This form looks really close to what we want, except for the -1 at the end. In an inductive proof, the derivation must exactly match the inductive hypothesis. However this is easy to fix. We will modify the original hypothesis as such: 0 ≤ f(n) ≤ c(g(n)) + d. This leads to the following derivation:
			=> 2*c(k+1/2)*lg(k+1/2)	+ d
			= c(k+1)*lg(k+1/2) + d
			= c(k+1)*lg(k+1) - lg(2) + d
			= c(k+1)*lg(k+1) - 1 + d
			≤ c(k+1)*lg(k+1) + d
		When d ≥ 0, c(k+1)*lg(k+1) - 1 + d ≤ c(k+1)*lg(k+1) + d. We have now proved the inductive step of the proof. We can now say with certainty that the recurrence T(n) = 2T(n/2) + n belongs to the set O(nlgn).
